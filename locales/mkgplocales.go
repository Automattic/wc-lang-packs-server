// +build ignore

// mkgplocales.go generates gplocales.go, containing list of locales.
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os/exec"
)

type Locale struct {
	EnglishName     string `json:"english_name"`
	NativeName      string `json:"native_name"`
	LangCodeISO6391 string `json:"lang_code_iso_639_1"`
	LangCodeISO6392 string `json:"lang_code_iso_639_2"`
	LangCodeISO6393 string `json:"lang_code_iso_639_3"`
	WPLocale        string `json:"wp_locale"`
}

func main() {
	var buf bytes.Buffer
	outf := func(format string, args ...interface{}) {
		fmt.Fprintf(&buf, format, args...)
	}
	outf("// AUTO-GENERATED BY mkgplocales.go\n\n")
	outf("package locales\n\n")
	outf("type Locale struct {\n")
	outf("EnglishName string `json:\"english_name\"`\n")
	outf("NativeName string `json:\"native_name\"`\n")
	outf("LangCodeISO6391 string `json:\"lang_code_iso_639_1\"`\n")
	outf("LangCodeISO6392 string `json:\"lang_code_iso_639_2\"`\n")
	outf("LangCodeISO6393 string `json:\"lang_code_iso_639_3\"`\n")
	outf("WPLocale string `json:\"wp_locale\"`\n")
	outf("}\n")

	phpJson := exec.Command("php", "gplocales-json.php")
	out, err := phpJson.Output()
	if err != nil {
		log.Fatal(err)
	}

	var data map[string]Locale
	if err = json.Unmarshal(out, &data); err != nil {
		log.Fatal(err)
	}

	outf("var locales = map[string]*Locale{\n")
	for _, v := range data {
		if v.WPLocale == "" {
			continue
		}

		outf("\t%q: &Locale{%q,%q,%q,%q,%q,%q},\n", v.WPLocale, v.EnglishName, v.NativeName, v.LangCodeISO6391, v.LangCodeISO6392, v.LangCodeISO6393, v.WPLocale)
	}
	outf("}\n")

	fmtbuf, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	err = ioutil.WriteFile("gplocales.go", fmtbuf, 0666)
	if err != nil {
		log.Fatal(err)
	}
}
